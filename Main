# Main.py

# Spacefruit the Game
# Main file
# By Alexander Werth
# Andrew ID: awerth2
# Recitation: U

# Cumulative Hours = 30

# === IMPORTS ===

from cmu_graphics import *
import math

# === MATH HELPERS ===

# Geometry
def hypotenuse(a, b):
    return (a ** 2 + b ** 2) ** 0.5

def distance(x1, y1, x2, y2):
    return( (y2 - y1) ** 2 + (x2 - x1) ** 2 ) ** 0.5

# 2D Vectors
def vecUnit(x, y): # Normalizes to vector of magnitude 1
    return x / hypotenuse(x,y), y / hypotenuse(x, y)

def vecDot(x1, y1, x2, y2): # Componentwise dot product
    return x1 * x2 + y1 * y2 # turns out it's not very special

def vecTheta(x1, y1, x2, y2): # Angle between lines, a la dot product
    # Crunches the two definitions of dot product,
    #   (sum of component products) = |a||b|cos(theta)
    # , evaluating for theta
    return math.acos( vecDot(x1, y1, x2, y2) / 
                    ( hypotenuse(x1, y1) * hypotenuse(x2, y2) ) )

# Planet tools
def centerDistance(pos1, pos2):
    return distance(pos1[0], pos1[1], pos2[0], pos2[1])

def vecAdd(v1, v2):
    return( v1[0] + v2[0], v1[1] + v2[1] )

# === DEBUG CLASSES ===

# A drawn object
class Helperball():
    Instances = []
    def __init__(self, centerPos, size, color = 'black'):
        self.centerPos = centerPos
        self.size = size
        self.color = color

        Helperball.Instances.append(self)
    
    def draw(self, app):
        drawCircle(*renderCoords(app, self.centerPos), self.size * app.scale, fill = self.color)

class Helperline():
    Instances = []
    def __init__(self, startPos, endPos, thickness, color = 'black'):
        self.startPos = startPos
        self.endPos = endPos
        self.color = color
        self.thickness = thickness

        Helperline.Instances.append(self)

    def setPos(self, startPos, endPos):
        self.startPos = startPos
        self.endPos = endPos
    
    def draw(self, app):
        drawLine(*renderCoords(app, self.startPos), *renderCoords(app, self.endPos), lineWidth = self.thickness * app.scale, fill = self.color)

# === MAIN CLASSES ===

# A small object that collides with planets
class SmallBody():
    Instances = []

    def __init__(self, pos, vel, size, mass):
        self.pos = pos
        self.vel = vel
        self.size = size
        self.mass = mass

        SmallBody.Instances.append(self)

    def collideWithSpheres(self):
        for thisPlanet in SpherePlanet.Instances:
            if centerDistance(self.pos, thisPlanet.pos) <= self.size + thisPlanet.size:
                # Colliding with this one!
                xComp, yComp = thisPlanet.getNormalVectorTo(self.pos) # unit normal vector
                centerIndicator.setPos(self.pos, vecAdd(self.pos, 
                                                        (xComp * 10, yComp * 10)
                                                        ))

                vFromPlanet = vecDot(self.vel[0], self.vel[1], xComp, yComp) # magnitude velocity in direction of planet center
                vXFromPlanet, vYFromPlanet = xComp * vFromPlanet, yComp * vFromPlanet # components thereof

                if vecDot(xComp, yComp, vXFromPlanet, vYFromPlanet) < 0: # Negative -> misaligned -> moving inwards towards planet
                    # (Note: if you were to check position interiority and not velocity, then you get rubber banding via compounding collisions)
                    # (This way, ideally, any collision should only have 1 velocity addition before the object stops going inwards)

                    # Position adjustment
                    # Following becomes negative if we are within collision bounds
                    # So subtract it out of position to push it to the exact bound
                    altitude = centerDistance(self.pos, thisPlanet.pos) - (self.size + thisPlanet.size)
                    self.pos[0] -= altitude * xComp
                    self.pos[1] -= altitude * yComp
                    # Speed adjustment
                    # Now that we've calculated how fast we approach the planet, just subtract that
                    elasticity = 1.3 # Portion of velocity added back. 1 for perfect inelastic (v -> 0), 2 for perfect elastic (v -> -v)
                    self.vel[0] -= vXFromPlanet * elasticity
                    self.vel[1] -= vYFromPlanet * elasticity
                
                velocityIndicator.setPos(self.pos, vecAdd(self.pos, (vXFromPlanet * 10, vYFromPlanet * 10)))

                return # I have decided that you'll never crash into two at once in one step. Saves us some time
            
            else:
                centerIndicator.setPos((0, 0), (0, 0))
                velocityIndicator.setPos((0, 0), (0, 0))

                

    def collideWithLines(self):
        pass
    
    def collideWithSmallbodies(self):
        pass

    def collide(self):
        self.collideWithSpheres()
        self.collideWithLines()
        self.collideWithSmallbodies()
    
class Player(SmallBody):
    def __init__(self, pos, vel, size, mass):
        super().__init__(pos, vel, size, mass)
        self.thrust = [0, 0]

        self.constants = {
            'thrustForce': 1,
            'rollForce': 1,
            'minimumLinearSpeed': 0.001,
            'minimumRotationalSpeed': 0.005,
            'constantThrustDrag': 0.02,
            'constantRollDrag': 0.04
        }

    def draw(self, app):
        drawCircle(*renderCoords(app, self.pos), self.size * app.scale, fill = 'blue')
        drawLine(*renderCoords(app, self.pos), *renderCoords(app, (self.pos[0], self.pos[1] + 5)), fill = 'black')


    # Control methods
    def thrustKeysPressed(self, key):
        if key in {'w', 'a', 's', 'd'}:
            player.thrust = [
                ( int(key == 'w') - int(key == 's') ) * self.constants['thrustForce'],
                ( int(key == 'd') - int(key == 'a') ) * self.constants['rollForce']
            ]

    def thrustKeysHeld(self, keyList):
        setKeys = set(keyList)
        if setKeys.intersection({'w', 'a', 's', 'd'}) != set(): # Non-empty intersection, so at least 1 is held
            player.thrust = [
                ( int('w' in setKeys) - int('s' in setKeys) ) * self.constants['thrustForce'],
                ( int('d' in setKeys) - int('a' in setKeys) ) * self.constants['rollForce']
            ]
    
    def thrustKeysReleased(self):
        player.thrust = [0, 0]

    def generalKeysPressed(self, app, key):
        pass
    
    def generalKeysHeld(self, app, keyList):
        app.scaleChangeDirection = int('up' in keyList) - int('down' in keyList)

    def generalKeysReleased(self, app, key):
        app.scaleChangeDirection = 0


# A big object that can move around in the world
class Planet():
    Instances = []
    def __init__(self, pos, vel, mass):
        self.pos = pos
        self.vel = vel
        self.mass = mass
        Planet.Instances.append(self)

class SpherePlanet(Planet):
    Instances = []
    def __init__(self, pos, vel, size, mass, color):
        super().__init__(pos, vel, mass)
        # Calling super_init has the added benefit of appending it to the superclass's instance list
        # So this sphereplanet is ALSO contained in the list of general
        self.size = size
        self.color = color
       

        self.collisionRadius = self.size

        SpherePlanet.Instances.append(self)

        # Set pos angle to default if not defined
        if len(self.pos) < 3:
            self.pos = (
                self.pos[0],
                self.pos[1],
                0 # Default angle
            )

    # Collision
    def setCollisionMesh(self, sizeChange):
        self.collisionRadius = self.size + sizeChange

    def getNormalVectorTo(self, otherpos):
        xComp = otherpos[0] - self.pos[0]
        yComp = otherpos[1] - self.pos[1]
        return vecUnit(xComp, yComp)

    # Motion
    def rotate(self, rotateAmount):
        self.pos[2] += rotateAmount
    def orbit(self, centerPos, orbitAmount):
        pass

    # Rendering
    def draw(self, app):
        drawCircle(*renderCoords(app, self.pos), 
                    self.size * app.scale, 
                    rotateAngle = renderAngle(self.pos),
                    fill = self.color)
    
    def drawCollider(self, app):
        drawCircle(*renderCoords(app, self.pos), 
                   self.collisionRadius * app.scale, 
                   rotateAngle = renderAngle(self.pos),
                   fill = None, border = 'red', dashes = True)

class LinePlanet(Planet):
    Instances = []
    def __init__(self, centerPos, vel, mass, mesh):
        super().__init__(centerPos, vel, mass)
        self.mesh = mesh
        LinePlanet.Instances.append(self)

    # Mesh Helping
    def getRealCoordinates(self):
        return [
            (thisPoint[0] + self.pos[0], 
             thisPoint[1] + self.pos[1]) 
                for thisPoint in self.mesh
        ]
    
    def getLinesFromPoints(self, points):
        # Takes list of size-2 tuples, makes list of size-4
        result = []
        for i in range(len(points)):
            # BEGINS by winding last to first
            # then proceeds up the list
            result.append(
                (
                    points[i-1][0],
                    points[i-1][1],
                    points[i][0],
                    points[i][1]
                )
            )
        return result # Range of 4-length tuples, line coordinates
    
    def printThisBody(self):
        print( self.getLinesFromPoints(self.getRealCoordinates()) )
    
    # Rendering
    def draw(self, app):
        pass

# === GLOBALS + OBJECT GENERATION ===

# WRANGLING OBJECTS

# Master collision mesh generator, so I can pass in player class object
def generateCollisionMeshes():
    for thisPlanet in SpherePlanet.Instances:
        thisPlanet.setCollisionMesh(player.size)

# INSTANCING

player = Player([-30, 0, 0], [0, 0, 0], 30, 50)

centerIndicator = Helperline((0, 0, 0), (0, 0, 0), 1, 'red')
velocityIndicator = Helperline((0, 0, 0), (0, 0, 0), 2, 'yellow')

greenPlanet = SpherePlanet((600, 200), (0, 0), 300, 300, 'green')
greenHead = Helperball((500, 500), 30)

Apple = SpherePlanet( (100, -100), (0, 0), 100, 50, 'red')

Quadrangle = LinePlanet(
    (-100, -100),
    (0, 0),
    100,
    [(-10, -10), (-10, 10), (10, 10), (10, -10)]
)


# === PHYSICS MATHEMATICS ===

# PLAYER PHYSICS
def takePlayerPhysicsStep(app):
    fNetx, fNety = calcPlayerNetForce(app)
    # Acceleration, velocity, position
    ddx = fNetx / player.mass
    ddy = fNety / player.mass
    ddTheta = calcPlayerNetTorque(app) / player.mass

    player.vel[0] += ddx
    player.vel[1] += ddy
    player.vel[2] += ddTheta

    snapVelocitiesToZero()
    
    player.pos[0] += player.vel[0]
    player.pos[1] += player.vel[1]
    player.pos[2] += player.vel[2]
    
def calcPlayerNetForce(app):
    fNetx, fNety = 0, 0 
    fNetx += player.thrust[0] * math.sin(math.radians(player.pos[2]))
    fNety += player.thrust[0] * math.cos(math.radians(player.pos[2]))

    dxPlanet = greenPlanet.pos[0] - player.pos[0]
    dyPlanet = greenPlanet.pos[1] - player.pos[1]

    fNetx += ( app.bigG * player.mass * greenPlanet.mass / (dxPlanet ** 2 + dyPlanet ** 2) ) * dxPlanet
    fNety += ( app.bigG * player.mass * greenPlanet.mass / (dxPlanet ** 2 + dyPlanet ** 2) ) * dyPlanet

    #fNetx -= player.vel[0] * player.constants['constantThrustDrag']
    #fNety -= player.vel[1] * player.constants['constantThrustDrag']
    return fNetx, fNety

def calcPlayerNetTorque(app):
    fNetTheta = 0
    fNetTheta += player.thrust[1]
    fNetTheta -= player.vel[2] * player.constants['constantRollDrag']
    return fNetTheta

def snapVelocitiesToZero():
    if player.thrust[0] == 0:
        if abs(player.vel[0]) < player.constants['minimumLinearSpeed']:
            player.vel[0] = 0
        if abs(player.vel[1]) < player.constants['minimumLinearSpeed']:
            player.vel[1] = 0
    if player.thrust[1] == 0:
        if abs(player.vel[2]) < player.constants['minimumRotationalSpeed']:
            player.vel[2] = 0

# === RENDERING ===

# SCREEN ORIGIN

# Placing the origin at the screen center
def setRenderOrigin(app, posX = 0.5, posY = 0.5):
    app.renderOrigin = (app.width * posX, app.height * posY)

def drawRenderOrigin(app):
    drawCircle(*app.renderOrigin, 3 * app.scale, fill = 'black')

# HELPERS FOR MASTER RENDERING

# Translation helper
def renderTranslate(x, y, cx, cy):
    return x - cx, y - cy

# Rotation helper
def renderRotate(x, y, theta):
    theta = math.radians(theta)
    rotatedX = math.cos(theta) * x - math.sin(theta) * y
    rotatedY = math.sin(theta) * x + math.cos(theta) * y
    return rotatedX, rotatedY

# Scale helper
def renderScale(app, x, y):
    return x * app.scale, y * app.scale

# Turning to screen coordinate helper
def renderScreenshift(app, x, y):
    return app.renderOrigin[0] + x, app.renderOrigin[1] - y

# MASTER RENDERING

# Master renderer, spits out coordinates shifted by player's position, rotation, screen scale, and screen position
def renderCoords(app, posTuple):
    xReal, yReal = posTuple[0], posTuple[1]
    if len(posTuple) == 3: # I want it to accept both coord and coord + rotation
        thetaReal = posTuple[2]
    else:
        thetaReal = None

    xCam, yCam = player.pos[0], player.pos[1]
    thetaCam = player.pos[2]
    
    # Shift the coordinates in realspace to put the camera at origin, scale all as well
    tx, ty = renderTranslate(xReal, yReal, xCam, yCam)
    rx, ry = renderRotate(tx, ty, thetaCam)
    finalx, finaly = renderScale(app, rx, ry)
    
    # Shift to render scheme
    return renderScreenshift(app, finalx, finaly)

# Rotation handler for non-point objects (CMU graphics bodies, images)
def renderAngle(rotationCoord): 
    trueBodyAngle = rotationCoord[2] if isinstance(rotationCoord, tuple) else rotationCoord
    return trueBodyAngle - player.pos[2] 

# SCALE MANAGEMENT AND CONTROL

# Initialize screen scale
def setScaleStart(app):
    app.scale = 1
    app.scaleChangeDirection = 0

# Changes screen scale based on current state of app.scaleChangeDirection
def stepScale(app):
    scaleMax = 5
    scaleMin = 0.1
    # Short circuit if it's even relevant, then ensure within bounds
    if (app.scaleChangeDirection != 0 and
        (app.scaleChangeDirection == 1 and app.scale < scaleMax) or 
        (app.scaleChangeDirection == -1 and app.scale > scaleMin)):
            scaleFactor = 1 + (0.1 * app.scaleChangeDirection)
            app.scale *= scaleFactor

# === EVENT HANDLING ===

# STEPPING

def onStep(app):
    takePlayerPhysicsStep(app)
    setRenderOrigin(app) # so it always centers
    stepScale(app)

    player.collideWithSpheres()
    
# PLAYER INTERACTION

def onKeyPress(app, key):
    player.thrustKeysPressed(key)
    player.generalKeysPressed(app, key)

def onKeyHold(app, key):
    player.thrustKeysHeld(key)
    player.generalKeysHeld(app, key)

def onKeyRelease(app, key):
    player.thrustKeysReleased()
    player.generalKeysReleased(app, key)

# DRAWING

def redrawAll(app): 
    
    for objectClass in [Helperball, Helperline, SmallBody, Planet]:
        for instance in objectClass.Instances:
            instance.draw(app)


    #greenPlanet.draw(app)
    #greenPlanet.drawCollider(app)
    #Apple.draw(app)
   
    #player.draw(app)
    drawRenderOrigin(app)

    #drawLabel(f"Thrust: {player.thrust}", 100, 30, align = 'left')
    #xThrust = math.sin(math.radians(player.pos[2]))
    #yThrust = math.cos(math.radians(player.pos[2]))
    #drawLabel(f"Angle Components: {xThrust}, {yThrust}", 100, 110, align = 'left')

    #drawLabel(f"Speed: {player.vel}", 100, 50, align = 'left')
    #trueSpeed = hypotenuse(player.vel[0], player.vel[1])
    #drawLabel(f"Absolute Speed:{trueSpeed}", 100, 70, align = 'left')

    #drawLabel(f"Pos: {player.pos}", 100, 90, align = 'left')

    #drawLabel(f"Scale: {app.scale}", 100, 130, align = 'left')

    

# === APP INITIALIZATION ===

def debugGamut(app):
    app.isTheGravityOn = False

def onAppStart(app):
    setRenderOrigin(app)
    setScaleStart(app)

    generateCollisionMeshes()
    # Game state
    app.stepsPerSecond = 30
    app.bigG = 1

    for objectClass in [Helperball, Helperline, SmallBody, Planet]:
        print("How calling objects of", objectClass)
        for instance in objectClass.Instances:
            print(instance)

# === MAIN ===

def main():
    scale = 600
    runApp(width = scale, height = scale)

main()