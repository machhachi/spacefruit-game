# Main.py

# Spacefruit the Game
# Main file
# By Alexander Werth
# Andrew ID: awerth2
# Recitation: U

# Cumulative Hours = 40

# <=> Desires <=>

# Real current projects
# - Line planets
# - General gravity

# General minor bugs
#   Rolling on smallbody sphere planet collisions never really hits zero
#       Define some threshold below which it snaps to zero
#       Perhaps do for linera velocity as well
#       And then add back planet velocity at some point, after all the above

# Physics engine level developments

# - Test collision on moving planets?
# - add planet velocity on collision

# - Small body collision on line planets
# - Small body self-collision, ideally implementing momentum logic to move both self and other body

# - Small body contains an elasticity variable, to be 
#   - A) customized per smallbody instance (i.e. fruit)
#   - B) varied based on player orientation (0 elasticity on landing gear side)


# Future envisioned code simplifications
# - Master (planet) collider tool

#   A polyname method that is called by smallbody in reference to both sphere and line planets. 
#       Returns, based on player coordinates, the depth inside and surface normal of the relevant surface the smallbody is colliding.
#       This is just part of the circle for sphere planets, and the relevant line for line planets.
#   Allows collision to be globalized, as once that information is acquired, bouncing + skidding + rolling are identical betwee sphere and line

# - Line planets get a circular detection radius to even bother testing lines for intersection

# Entity culling for rendering at certain distance(all things have pos attribute)
# Perhaps entity culling for gravity as well


# Entirely new mechanisms
#   Gravity hand!!!!!
#       A probe spawned at mouse coordinates backtranslated to realspace (oh god we gotta run that calculation in reverse????)
#           That'll be a hell of a black box function
#           And it'll also be relevant, in the scale calculations, to define a furthest distance from the player the thing can be at
#       Probe, when mouse is being held, exerts a strong gravity on, i guess, all non-player smallbodies

#   Drawing line planets on top of other planets!
#       Not too hard if static (example, can we get a stonehenge arch on a sphere planet? Easily, with a no-mass line planet)
#       But reason out some sort of velocity parenting mechanism as well

# HUD elemtents needed:
#   Boost meter
#   Strongest gravity influence
#   Velocity

# Bottom of screen aligns to biggest gravity influence


# === IMPORTS ===

from cmu_graphics import *
import math

# === CLASSES: FUNCTION LIBRARIES ===

class MyMath():
    def __init__(self):
        pass

    def sign(self, x):
        return 1 if x >= 0 else -1
    
    def hypotenuse(self, a, b):
        return (a ** 2 + b ** 2) ** 0.5
    
    def distance(self, x1, y1, x2, y2):
        return self.hypotenuse(x2 - x1, y2 - y1)
    
    def heronArea(self, a, b, c):
        s = (a + b + c) / 2
        return ( ( s * (s - a) * (s - b) * (s - c) ) ** 0.5 )
    
mymath = MyMath()

class Vector(): # A package of vector functions
    def __init__(self):
        pass

    def vectorize(self, line): # Line (coords) to vector
        return (line[1][0] - line[0][0], line[1][1] - line[0][1])

    def distance(self, v1, v2):
        dx = v2[0] - v1[0]
        dy = v2[1] - v1[1]
        return mymath.hypotenuse(dx, dy)
    
    def len(self, v):
        return mymath.hypotenuse(v[0], v[1])
    
    def add(self, v1, v2):
        return (v1[0] + v2[0], v1[1] + v2[1])
    
    def subtract(self, v1, v2):
        return (v1[0] - v2[0], v1[1] - v2[1])
    
    def scale(self, v, k):
        return (v[0] * k, v[1] * k)
    
    def unit(self, v):
        return( v[0] / self.len(v), v[1] / self.len(v) )
    
    def dot(self, v1, v2):
        return v1[0] * v2[0] + v1[1] * v2[1] # startlingly simple
    
    def cw(self, v):
        return (v[1], -v[0])
    
    def ccw(self, v):
        return (-v[1], v[0])
    
    def heronAreaByPoints(self, pointP, pointQ, pointR):
        lineA, lineB, lineC = vector.distance(pointP, pointQ), vector.distance(pointQ, pointR), vector.distance(pointR, pointP)
        return mymath.heronArea(lineA, lineB, lineC)

vector = Vector()

# === CLASSES: DEBUG DRAWN OBJECTS ===

# A drawn object
class Helperball():
    Instances = []
    def __init__(self, centerPos, size, color = 'black'):
        self.centerPos = centerPos
        self.size = size
        self.color = color

        Helperball.Instances.append(self)
    
    def draw(self, app):
        drawCircle(*render.getCoords(self.centerPos), render.getScale(self.size), fill = self.color)

class Helperline():
    Instances = []
    def __init__(self, startPos, endPos, thickness, color = 'black'):
        self.startPos = startPos
        self.endPos = endPos
        self.color = color
        self.thickness = thickness

        Helperline.Instances.append(self)

    def setPos(self, startPos, endPos):
        self.startPos = startPos
        self.endPos = endPos
    
    def draw(self, app):
        drawLine(*render.getCoords(self.startPos), *render.getCoords(self.endPos), lineWidth = render.getScale(self.thickness), fill = self.color)

# === CLASSES: SIMULATION SUPPORT ===

# === CLASSES: GAME OBJECTS ===

# SmallBodies: A small object that collides with planets
class SmallBody():
    Instances = []

    def __init__(self, pos, vel, size, mass):
        self.pos = pos
        self.vel = vel
        self.size = size
        self.mass = mass

        SmallBody.Instances.append(self)

    # Physics 
    def takePhysicsStep(self, app):
        # Force
        fNetx, fNety = self.calcNetForce(app)
        fNetTheta = self.calcNetTorque()

        # Acceleration, velocity, position
        ddx = fNetx / self.mass
        ddy = fNety / self.mass
        ddTheta = fNetTheta / self.mass

        self.vel[0] += ddx
        self.vel[1] += ddy
        self.vel[2] += ddTheta

        self.snapVelocitiesToZero()
        
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1]
        self.pos[2] += self.vel[2]

    def calcNetForce(self, app):
        fNetx, fNety = 0, 0

        fGx, fGy = self.getAllPlanetGravity(app)

        fNetx += fGx
        fNety += fGy
        return fNetx, fNety

    def getAllPlanetGravity(self, app):
        fGx, fGy = 0, 0
        for thisPlanet in Planet.Instances:
            # Get distance vector to planet
            dxPlanet, dyPlanet = thisPlanet.pos[0] - self.pos[0], thisPlanet.pos[1] - self.pos[1]
            # Crunch newtonian gravity: gmM / r^2
            fGThisPlanet = ( app.bigG * self.mass * thisPlanet.mass ) / (dxPlanet ** 2 + dyPlanet ** 2)
    
            xHat, yHat = vector.unit((dxPlanet, dyPlanet))
            fGx += fGThisPlanet * xHat
            fGy += fGThisPlanet * yHat
        return fGx, fGy

    def calcNetTorque(self): # Placeholder for player
        return 0

    def snapVelocitiesToZero(self): # Placeholder for player
        pass

    # Collision
    def collide(self):
        self.collideWithSpheres()
        self.collideWithLines()
        self.collideWithSmallbodies()

    def collideWithSpheres(self):
        for thisPlanet in SpherePlanet.Instances:
            # Test if we are within the collision circle, thus, colliding with the body
            if vector.distance(self.pos, thisPlanet.pos) <= self.size + thisPlanet.size:
                normal = thisPlanet.getNormalVectorTo(self.pos) # unit normal vector
                depth = vector.distance(self.pos, thisPlanet.pos) - (self.size + thisPlanet.size)
                self.evaluatePlanetCollision(normal, depth)
                
    def collideWithLines(self):
        for thisPlanet in LinePlanet.Instances:
            # Don't bother calculating unless we're in the relevant range to begin
            if vector.distance(self.pos, thisPlanet.pos) <= thisPlanet.getCollisionCheckRadius():
                # Use dedicated lineplanet collision method (Don't be fooled, dramatically more hard than the sphere one :( )
                collisionResult = thisPlanet.isCollidingWith(self.pos)
                if collisionResult != False:
                    segment = collisionResult # Function spits out nearest segment

                    # Rotate the (vectorized)segment to get its normal vector
                    normal = vector.unit(vector.cw(vector.vectorize(segment)))
                    # Via triangle angle formula (A = 1/2 bh), get h = 2 * area / base
                    depth = 2 * vector.heronAreaByPoints(segment[0], segment[1], self.pos) / vector.len(vector.vectorize(segment))

                    self.evaluatePlanetCollision(normal, -depth)


    def collideWithSmallbodies(self):
        pass  
    
    def evaluatePlanetCollision(self, normal, depth):
        normalX, normalY = normal[0], normal[1]
        vRadial = vector.dot(self.vel, normal) # magnitude velocity in direction of planet center
        vXRadial, vYRadial = normalX * vRadial, normalY * vRadial # components thereof

        # Evaluate collision if we're moving inwards towards planet

        if vector.dot(normal, (vXRadial, vYRadial)) < 0: # Negative -> misaligned -> moving inwards towards planet
            # (Note: if you were to check position interiority and not velocity, then you might repeat this collision)
            # (That would be rubber-banding, where you get insane collisions because one phys step isn't enough to un-collide you)
            # (This way, any collision will only have 1 velocity change before the object stops going inwards)

            # Position adjustment
            #   Depth, or Altitude when positive, (inward-surface-to-surface dist), is negative since we are within collision bounds
            #   So subtract it out of position to push smallbody to the exact bound
            self.pos[0] -= depth * normalX
            self.pos[1] -= depth * normalY

            # Velocity adjustment
            #   First, extract radial and tangential velocity
            vXTangential = self.vel[0] - vXRadial
            vYTangential = self.vel[1] - vYRadial

            # Radial component: "bounce" speed. Output should be 0x original (inelastic) up to -1x(elastic)
            elasticity = 0.5
            newVXRadial = -vXRadial * elasticity
            newVYRadial = -vYRadial * elasticity

            # Tangential component: "skid" speed. Multiply by some decreasing fraction, and convert some to rolling.
            friction = 0.7
            newVXTangential = vXTangential * (1 - friction)
            newVYTangential = vYTangential * (1 - friction)

            # Roll component: rolling. Whatever was lost in tangential, we assume it goes about fully into rolling.
            #   To get the direction: we need to know if we're moving CW or CCW about the planet 
            #   If you rotate the normal vector (points outwards) 90 degrees CW, that now points in the CW-about-planet direction
            #   And we can use dot product to see if we're aligned or unaligned with that

            # Vector transformation for rotating CW 90 degrees
            surfaceTangentX, surfaceTangentY = normalY, -normalX
            rollVelocity = vector.dot((vXTangential, vYTangential), (surfaceTangentX, surfaceTangentY)) * friction

            # Convert linear to angular by diving by radius
            rollConversionFactor = 10 / self.size # step count
            
            # Decreasing old angular velocity is a crack solution to the rolling-amplification issue I had a bit ago
            oldRollCarryover = self.vel[2] * 0.95
            newVTheta = oldRollCarryover + rollVelocity * rollConversionFactor

            # Recombine 
            self.vel[0] = newVXRadial + newVXTangential
            self.vel[1] = newVYRadial + newVYTangential
            self.vel[2] = newVTheta

    # Rendering
    def draw(self, app):
        drawCircle(*render.getCoords(self.pos), render.getScale(self.size), fill = 'black')
        drawStar(*render.getCoords(self.pos), render.getScale(self.size), 5, fill = 'white', rotateAngle = render.getAngle(self.pos[2]))

    # Step
    def step(self, app):
        self.collide()
        self.takePhysicsStep(app)

class Player(SmallBody):
    def __init__(self, pos, vel, size, mass):
        super().__init__(pos, vel, size, mass)
        self.thrust = [0, 0]
        self.boostMeter = 100
        self.boostMax = 100
        self.boostRefillRate = 1

        self.thrustConstants = {
            'thrustForce': 5,
            'rollForce': 2,
            'boostMult': 2
        }

        self.constants = {
            'minimumLinearSpeed': 0.001,
            'minimumRotationalSpeed': 0.005,
            'constantThrustDrag': 0.02,
            'constantRollDrag': 0.1
        }
  
    # Key inputs
    def thrustKeysPressed(self, key):
        if key in {'w', 'a', 's', 'd'}:
            player.thrust = [
                ( int(key == 'w') - int(key == 's') ) * self.thrustConstants['thrustForce'],
                ( int(key == 'd') - int(key == 'a') ) * self.thrustConstants['rollForce']
            ]

    def thrustKeysHeld(self, keyList):
        setKeys = set(keyList)
        if setKeys.intersection({'w', 'a', 's', 'd'}) != set(): # Non-empty intersection, so at least 1 is held
            player.thrust = [
                ( int('w' in setKeys) - int('s' in setKeys) ) * self.thrustConstants['thrustForce'],
                ( int('d' in setKeys) - int('a' in setKeys) ) * self.thrustConstants['rollForce']
            ]
    
    def thrustKeysReleased(self):
        player.thrust = [0, 0]

    def generalKeysPressed(self, app, key):
        pass
    
    def generalKeysHeld(self, app, keyList):
        render.scaleChangeDirection = int('up' in keyList) - int('down' in keyList)

    def generalKeysReleased(self, app, key):
        render.scaleChangeDirection = 0
    
    # Boost thrust
    def getBoost(self):
        return self.boostMeter

    def stepBoost(self):
        if self.thrust[0] != 0 and self.boostMeter > 0:
            boostThrust = self.thrustConstants['thrustForce'] * self.thrustConstants['boostMult'] 
            self.thrust[0] = mymath.sign(self.thrust[0]) * boostThrust
            self.boostMeter -= 1
        elif self.thrust[0] == 0 and self.boostMeter < self.boostMax:
            self.boostMeter += self.boostRefillRate
        #print(self.boostMeter)

    # Physics 
    # Uses default method for takePhysicsStep
        
    def calcNetForce(self, app):
        # Force
        fNetx, fNety = 0, 0 

        # Player input
        fNetx += self.thrust[0] * math.sin(math.radians(self.pos[2]))
        fNety += self.thrust[0] * math.cos(math.radians(self.pos[2]))

        # Gravity
        # Gravity method is the same for small bodies as is for player
        fGx, fGy = self.getAllPlanetGravity(app)
        fNetx += fGx
        fNety += fGy

        # Drag
        fNetx -= self.vel[0] * self.constants['constantThrustDrag']
        fNety -= self.vel[1] * self.constants['constantThrustDrag']
        return fNetx, fNety

    def calcNetTorque(self):
        fNetTheta = 0
        fNetTheta += self.thrust[1]
        fNetTheta -= self.vel[2] * self.constants['constantRollDrag']
        return fNetTheta

    def snapVelocitiesToZero(self):
        if self.thrust[0] == 0:
            if abs(self.vel[0]) < self.constants['minimumLinearSpeed']:
                self.vel[0] = 0
            if abs(self.vel[1]) < self.constants['minimumLinearSpeed']:
                self.vel[1] = 0
        if self.thrust[1] == 0:
            if abs(self.vel[2]) < self.constants['minimumRotationalSpeed']:
                self.vel[2] = 0
    
    
    # Stepping:
    def step(self, app):
        self.stepBoost()
        self.collide()
        self.takePhysicsStep(app)

    # Rendering
    def draw(self, app):
        image = 'assets/player/player.png'
        rawWidth, rawHeight = getImageSize(image)
        myScaleFactor = 0.5
        realWidth, realHeight = render.getScale(rawWidth * myScaleFactor), render.getScale(rawHeight * myScaleFactor)
        drawImage('assets/player/player.png', *render.getCoords(self.pos), rotateAngle = render.getAngle(self.pos), width = realWidth, height = realHeight, align = 'center')

class Fruit(SmallBody):
    def __init__(self, pos, vel, type, customSize = None, customMass = None):
        super().__init__(pos, vel)
        
        typeDict = {
            'debug':{
                'Name':'Debug Fruit',
                'Size':20,
                'Mass':30,
                'Image':['Circle','orchid'],
                'Flavortext':'Testing flavortext'
            },
            'apple':{
                'Name':'Red Delicious',
                'Size':15,
                'Mass':30,
                'Image':['Sprite','fake apple url here'],
                'Flavortext':"The shittiest of them all. We're taking points away from you, just for having this."
            },
            'jackfruit':{
                'Name':'Gravitational Jackfruit',
                'Size':80,
                'Mass':100,
                'Image':['Sprite','evil jackfriut url here'],
                'Flavortext':"The grand daddy. This thing will wipe out stars, if you're not careful."
            },
            'whitepeach':{
                'Name':'Starlight Peach',
                'Size':25,
                'Mass':25,
                'Image':['Sprite','fake peach url here'],
                'Flavortext':"So light it nearly floats. You could lose this one, among all the stars."
            },
            'cherry':{
                'Name':'Space Debris Cherry',
                'Size':5,
                'Mass':5,
                'Image':['Sprite','wrong cherry url here'],
                'Flavortext':"Small and sweet. The pit appears to be, somehow, a piece of a satellite."
            },
        }
        
        thisFruitType = typeDict[type]
        self.name = thisFruitType['Name']
        self.size = thisFruitType['Size'] if customSize == None else customSize
        self.mass = thisFruitType['Mass'] if customMass == None else customMass

player = Player([-30, 0, 0], [0, 0, 0], 30, 50)

# Planets: A big object that can move around in the world
class Planet():
    Instances = []
    def __init__(self, pos, vel, mass):
        self.pos = pos
        self.vel = vel
        self.mass = mass
        Planet.Instances.append(self)

        self.orbiting = None
    
    def __repr__(self):
        return f"Planet, default, at {self.pos} weighs {self.mass}"
    
    def setOrbitingBody(self, bodyToOrbit):
        self.orbiting = bodyToOrbit
    
    def stepOrbit(self):
        if self.orbiting != None:
            pass

    def step(self):
        self.pos += self.vel
        self.stepOrbit()

class SpherePlanet(Planet):
    Instances = []
    def __init__(self, pos, vel, size, mass, color):
        super().__init__(pos, vel, mass)
        # Calling super_init has the added benefit of appending it to the superclass's instance list
        # So this sphereplanet is ALSO contained in the list of general
        self.size = size
        self.color = color
        self.collisionRadius = self.size + player.size

        SpherePlanet.Instances.append(self)

        # Set pos angle to default if not defined
        if len(self.pos) < 3:
            self.pos = (
                self.pos[0],
                self.pos[1],
                0 # Default angle
            )
        
    def getNormalVectorTo(self, otherpos):
        xComp = otherpos[0] - self.pos[0]
        yComp = otherpos[1] - self.pos[1]
        return vector.unit((xComp, yComp))

    # Rendering
    def draw(self, app):
        drawCircle(*render.getCoords(self.pos), 
                    render.getScale(self.size), 
                    rotateAngle = render.getAngle(self.pos),
                    fill = self.color)
    
    def drawCollider(self, app):
        drawCircle(*render.getCoords(self.pos), 
                   render.getScale(self.collisionRadius), 
                   rotateAngle = render.getAngle(self.pos),
                   fill = None, border = 'red', dashes = True)

class LinePlanet(Planet):
    Instances = []
    def __init__(self, centerPos, vel, mass, mesh):
        super().__init__(centerPos, vel, mass)
        # Wind the mesh counterclockwise
        # All hell will break loose if this mesh isn't wound counterclockwise
        # I swear to god
        self.mesh = mesh
        self.setCollisionCheckRadius()

        LinePlanet.Instances.append(self)

    # Mesh Helping
    def getWorldspaceMesh(self):
        return [
            (thisPoint[0] + self.pos[0], 
             thisPoint[1] + self.pos[1]) 
                for thisPoint in self.mesh
        ]
    
    def getLinesFromPoints(self, points):
        # Takes list of size-2 tuples, makes list of size-2 with nested size-2 tuples
        result = []
        for i in range(len(points)):
            # BEGINS by winding last to first
            # then proceeds up the list
            result.append(
                (
                    (points[i-1][0], points[i-1][1]),
                    (points[i][0], points[i][1])
                )
            )
        return result # List of lines, each a 2-length tuple, containing 2 points, each 2-length tuples

    def getWorldMeshLines(self):
        return self.getLinesFromPoints(self.getWorldspaceMesh())
    
    # Collision

    # Calculate and save collision radius
    def setCollisionCheckRadius(self):
        furthestPointDistance = 0
        furthestPoint = None
        for relativePoint in self.mesh:
            # Get radial distance from defined center
            currentDistance = vector.len(relativePoint)
            
            # Set to first, or to furthest away
            if furthestPoint == None or currentDistance > furthestPointDistance:
                furthestPoint = relativePoint
                furthestPointDistance = currentDistance
        # We got the furthest point
        self.collisionCheckRadius = furthestPointDistance

    def getCollisionCheckRadius(self):
        return self.collisionCheckRadius
    
    # Check interiority (sadge) (extremely complex and frankly annoying)
    def isCollidingWith(self, testPoint):
        # Returns false if point is not inside
        # If is, returns points of the determined nearest segment

        # To dodge any edge cases, we calc interiority by majority vote
        interiorityConsensus = 0

        # Raycast segment generation
        raycastSegments = []
        unitDirections = [(1, 0), (0, 1), (-1, 0), (0, -1), # Eight cardinal directions
                          (0.7, 0.7), (-0.7, 0.7), (-0.7, -0.7), (0.7, -0.7)] # In idgaf terms, sqrt(2)/2 = 0.7
        maxRayLength = self.getCollisionCheckRadius() * 2 # Collision *diameter* means we are guaranteed to cross the entire circle, thus the entire mesh
        rayStart = testPoint
        for rayIndex in range(8):
            # Each endpoint is the respective cardinal unit direction scaled by the max possible radius we'd need to check
            # and of course it needs to be made relative to start, hence vector.add()
            rayEnd = vector.add(rayStart, vector.scale(unitDirections[rayIndex], maxRayLength))
            raycastSegments.append((rayStart, rayEnd))
        
        # Collision counting
        for ray in raycastSegments:
            intersectionCount = 0
            for segment in self.getWorldMeshLines():
                doesIntersect = self.segmentsIntersect(ray, segment)
                if doesIntersect != False:
                    intersectionCount += 1
                    # Any business about getting the closest intersection
            hasOddIntersections = intersectionCount % 2 == 1
            interiorityConsensus += 1 if hasOddIntersections else -1
        
        # Return false if not interior, otherwise calculate closest segment
        if interiorityConsensus <= 0:
            return False
        else:
            # Return the closest segment as determined by smallest area via Heron's Formula
            minArea = None
            closestSegment = None
            for segment in self.getWorldMeshLines():
                area = vector.heronAreaByPoints(*segment, testPoint)
                if minArea == None or area < minArea:
                    closestSegment = segment
                    minArea = area

            return closestSegment

    def segmentsIntersect(self, line1, line2):
        # Full credit to https://www.geeksforgeeks.org/dsa/check-if-two-given-line-segments-intersect/
        # It's a nice one

        def onSegment(p, q, r):
            return ( q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and
                     q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1]))
        
        def winding(p, q, r):
            val = ( (q[1] - p[1]) * (r[0] - q[0]) -
                    (q[0] - p[0]) * (r[1] - q[1]) )

            # collinear
            if val == 0:
                return 0
            # 1 for clockwise, 2 for counterclockwise
            return 1 if val > 0 else 2

        # Calculate four windings of subsets of the points (a segment and one end of the other)
        o1 = winding(line1[0], line1[1], line2[0])
        o2 = winding(line1[0], line1[1], line2[1])
        o3 = winding(line2[0], line2[1], line1[0])
        o4 = winding(line2[0], line2[1], line1[1])

        # general case
        if o1 != o2 and o3 != o4:
            return True
        
        # special cases
        # p1, q1 and p2 are collinear and p2 lies on segment p1q1
        if o1 == 0 and onSegment(line1[0], line2[0], line1[1]):
            return True

        # p1, q1 and q2 are collinear and q2 lies on segment p1q1
        if o2 == 0 and onSegment(line1[0], line2[1], line1[1]):
            return True

        # p2, q2 and p1 are collinear and p1 lies on segment p2q2
        if o3 == 0 and onSegment(line2[0], line1[0], line2[1]):
            return True

        # p2, q2 and q1 are collinear and q1 lies on segment p2q2 
        if o4 == 0 and onSegment(line2[0], line1[1], line2[1]):
            return True
        
        return False

    # Rendering
    def draw(self, app):
        for thisLine in self.getLinesFromPoints(self.getWorldspaceMesh()):
            lineStart = render.getCoords(thisLine[0])
            lineEnd = render.getCoords(thisLine[1])
            drawLine(*lineStart, *lineEnd, fill = 'red', lineWidth = render.getScale(2))

# === GAME OBJECT INSTANCING ===

appleBall = SmallBody([-30, 20, 0], [0, 0, 0], 25, 40)

greenPlanet = SpherePlanet((600, 200), (0, 0), 300, 10000, 'green')
greenHead = Helperball((500, 500), 30)

Apple = SpherePlanet( (100, -100), (0, 0), 100, 200, 'red')
Orange = SpherePlanet((300, -500), (50, 50), 250, 1000, 'orange')

Quadrangle = LinePlanet((-300, -500), (0, 0), 100, [(-100, -100), (100, -200), (150, 100), (100, 400), (-300, 300)])

# === CLASSES: RENDERING ===

class Render():
    # FUNDAMENTALS
    def __init__(self, app):
        self.renderOrigin = (app.width * 0.5, app.height * 0.5)
        self.scale = 1
        self.scaleChangeDirection = 0
        self.setRenderOrigin(app)
    
    def step(self, app):
        self.setRenderOrigin(app)
        self.stepScale()

    def draw(self, app):
        self.internal_drawRenderOrigin(app)
    
    # SCREEN ORIGIN
    def setRenderOrigin(self, app, posX = 0.5, posY = 0.5):
        self.renderOrigin = (app.width * posX, app.height * posY)

    def internal_drawRenderOrigin(self, app):
        drawCircle(*self.renderOrigin, 3 * self.scale, fill = 'black')

    # MASTER RENDERING
    # Master renderer, spits out coordinates shifted by player's position, rotation, screen scale, and screen position
    def getCoords(self, posTuple):
        xReal, yReal = posTuple[0], posTuple[1]
        if len(posTuple) == 3: # I want it to accept both coord and coord + rotation
            thetaReal = posTuple[2]
        else:
            thetaReal = None

        xCam, yCam = player.pos[0], player.pos[1]
        thetaCam = player.pos[2]
        
        # Shift the coordinates in realspace to put the camera at origin, scale all as well
        tx, ty = self.internal_renderTranslate(xReal, yReal, xCam, yCam)
        rx, ry = self.internal_renderRotate(tx, ty, thetaCam)
        finalx, finaly = self.internal_renderScale(rx, ry)
        
        # Shift to render scheme
        return self.internal_renderScreenshift(finalx, finaly)

    # Rotation handler for non-point objects (CMU graphics bodies, images)
    def getAngle(self, rotationCoord): 
        trueBodyAngle = rotationCoord[2] if isinstance(rotationCoord, tuple) or isinstance(rotationCoord, list) else rotationCoord
        return trueBodyAngle - player.pos[2]
    
    # Scale handler for non-point objects
    def getScale(self, normalScale):
        return normalScale * self.scale

    # MASTER RENDER HELPERS 
    # Translation helper
    def internal_renderTranslate(self, x, y, cx, cy):
        return x - cx, y - cy

    # Rotation helper
    def internal_renderRotate(self, x, y, theta):
        theta = math.radians(theta)
        rotatedX = math.cos(theta) * x - math.sin(theta) * y
        rotatedY = math.sin(theta) * x + math.cos(theta) * y
        return rotatedX, rotatedY

    # Scale helper
    def internal_renderScale(self, x, y):
        return x * self.scale, y * self.scale

    # Turning to screen coordinate helper
    def internal_renderScreenshift(self, x, y):
        return self.renderOrigin[0] + x, self.renderOrigin[1] - y
    
    
    # SCALE
    # Changes screen scale based on current state of self.scaleChangeDirection
    def stepScale(self):
        scaleMax = 5
        scaleMin = 0.1
        # Short circuit if it's even relevant, then ensure within bounds
        if (self.scaleChangeDirection != 0 and
            (self.scaleChangeDirection == 1 and self.scale < scaleMax) or 
            (self.scaleChangeDirection == -1 and self.scale > scaleMin)):
                scaleFactor = 1 + (0.1 * self.scaleChangeDirection)
                self.scale *= scaleFactor

render = Render(app)

# === EVENT HANDLING ===

# STEP

def onStep(app):
    if not app.paused:
        takeStep(app)

def takeStep(app):
    # Object stepping
    for body in SmallBody.Instances:
        body.step(app)
    
    for planet in Planet.Instances:
        planet.step()

    # Rendering
    render.step(app)

# KEY INPUT

def onKeyPress(app, key):
    player.thrustKeysPressed(key)
    player.generalKeysPressed(app, key)

    if key == 'p':
        app.paused = not app.paused
    if app.paused and key == 'o':
        takeStep(app)


def onKeyHold(app, key):
    player.thrustKeysHeld(key)
    player.generalKeysHeld(app, key)

def onKeyRelease(app, key):
    player.thrustKeysReleased()
    player.generalKeysReleased(app, key)

# DRAWING

def redrawAll(app): 
    render.setRenderOrigin(app)

    # Game objects
    for objectClass in [SmallBody, Planet]:
        for instance in objectClass.Instances:
            instance.draw(app)

    if not app.debugPrint: # Threshold beyond which all is debug material
        return
    
    # Debug objects
    for objectClass in [Helperball, Helperline]:
        for instance in objectClass.Instances:
            instance.draw(app)
    
    # Velocity line
    drawLine(*render.getCoords(player.pos), *render.getCoords(vector.add(player.pos, (player.vel[0] * 20, player.vel[1] * 20))), fill = 'red')

    # Planet centerlines
    for thisPlanet in Planet.Instances:
        playerCoords = render.getCoords(player.pos)
        planetCoords = render.getCoords(thisPlanet.pos)
        drawLine(*playerCoords, *planetCoords, fill = 'blue')

    drawLabel(f"Thrust: {player.thrust}", 100, 30, align = 'left')
    xThrust = math.sin(math.radians(player.pos[2]))
    yThrust = math.cos(math.radians(player.pos[2]))
    drawLabel(f"Angle Components: {xThrust}, {yThrust}", 100, 110, align = 'left')

    drawLabel(f"Speed: {player.vel}", 100, 50, align = 'left')
    trueSpeed = mymath.hypotenuse(player.vel[0], player.vel[1])
    drawLabel(f"Absolute Speed:{trueSpeed}", 100, 70, align = 'left')

    drawLabel(f"Pos: {player.pos}", 100, 90, align = 'left')

    drawLabel(f"Scale: {render.scale}", 100, 130, align = 'left')

    

# === APP INITIALIZATION ===

def debugGamut(app):
    barrierString = '====='.join('#.#.#.#.#.#.#.#'.split('.'))

    print(barrierString)
    for objectClass in [Helperball, Helperline, SmallBody, Planet]:
        print("Now calling objects of", objectClass)
        for instance in objectClass.Instances:
            print(instance)
        print()
    print(barrierString)
    app.isTheGravityOn = False

def onAppStart(app):
    debugGamut(app)
    # Game state
    app.stepsPerSecond = 30
    app.paused = False
    app.bigG = 2
    app.debugPrint = True

# === MAIN ===

def main():
    scale = 600
    runApp(width = scale, height = scale)

main()